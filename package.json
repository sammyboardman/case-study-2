{
  "name": "case-study-2",
  "version": "1.0.0",
  "description": "A RESTful API with a single endpoint that fetches the data in the provided MongoDB collection and return the results in the requested format",
  "main": "index.js",
  "scripts": {
    "start": "node src/server.js",
    "prod": "export NODE_ENV=production && pm2 start src/server.js",
    "test": "export NODE_ENV=test && jest --runInBand --coverage",
    "test:coverage": "npm test -- --coverageReporters=text",
    "docker:start": "docker-compose -f ./docker-compose.dev.yml up -d",
    "docker:test": "docker-compose -f ./docker-compose.test.yml up",
    "docker:build": "docker image build .",
    "docker:stop": "docker-compose -f ./docker-compose.dev.yml down",
    "docker:tail": "docker-compose -f ./docker-compose.dev.yml logs -f getir-case-study",
    "docker:watch": "docker-compose -f ./docker-compose.dev.yml -f ./docker-compose.watch.yml up || true",
    "docker:debug": "DEBUG=true npm run docker:start",
    "lint": "eslint --ext js ",
    "precommit": "npm run lint",
    "prepush": "npm run test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sammyboardman/case-study-2.git"
  },
  "author": "Samuel Anjorin",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/sammyboardman/case-study-2/issues"
  },
  "homepage": "https://github.com/sammyboardman/case-study-2#readme",
  "dependencies": {
    "compression": "^1.7.4",
    "config": "^3.3.3",
    "cors": "^2.8.5",
    "express": "^4.17.1",
    "express-rate-limit": "^5.2.6",
    "helmet": "^4.4.1",
    "joi": "^17.4.0",
    "moment": "^2.29.1",
    "mongoose": "^5.11.17",
    "morgan": "^1.10.0",
    "swagger-ui-express": "^4.1.6",
    "winston": "^3.3.3"
  },
  "devDependencies": {
    "eslint": "^7.20.0",
    "eslint-config-airbnb-base": "^14.2.1",
    "eslint-plugin-import": "^2.22.1",
    "supertest": "^6.1.3",
    "jest": "^26.6.3",
    "faker": "^5.4.0",
    "husky": "^4.2.3"
  },
  "jest": {
    "verbose": true,
    "testPathIgnorePatterns": [
      "/config"
    ],
    "transform": {},
    "collectCoverage": false,
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    },
    "collectCoverageFrom": [
      "**/src/**/*.js",
      "!**/src/server.js",
      "!**/src/app.js"
    ]
  }
}
